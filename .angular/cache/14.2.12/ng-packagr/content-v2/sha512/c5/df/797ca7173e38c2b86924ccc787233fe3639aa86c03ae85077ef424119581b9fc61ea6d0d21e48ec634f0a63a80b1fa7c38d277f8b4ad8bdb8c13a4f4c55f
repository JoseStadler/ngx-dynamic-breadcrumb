{"hash":"88096b409adb6c9018015519775a6257e1a1d9e2","fesm2020":{"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, Input, NgModule } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i1 from '@angular/router';\nimport { NavigationEnd, PRIMARY_OUTLET, RouterModule } from '@angular/router';\nimport { filter, map } from 'rxjs/operators';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nclass NgDynamicBreadcrumbService {\n    constructor() {\n        this.breadcrumbLabels = new BehaviorSubject([]);\n        this.newBreadcrumb = new BehaviorSubject([]);\n    }\n    updateBreadcrumbLabels(labels) {\n        this.breadcrumbLabels.next(labels);\n    }\n    updateBreadcrumb(newBreadcrumb) {\n        this.newBreadcrumb.next(newBreadcrumb);\n    }\n}\nNgDynamicBreadcrumbService.ɵfac = function NgDynamicBreadcrumbService_Factory(t) { return new (t || NgDynamicBreadcrumbService)(); };\nNgDynamicBreadcrumbService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: NgDynamicBreadcrumbService, factory: NgDynamicBreadcrumbService.ɵfac, providedIn: 'root' });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgDynamicBreadcrumbService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], function () { return []; }, null); })();\n\nconst _c0 = function (a0) { return { \"color\": a0 }; };\nfunction NgDynamicBreadcrumbComponent_span_1_a_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"a\", 6);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const item_r1 = i0.ɵɵnextContext().$implicit;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"routerLink\", item_r1 == null ? null : item_r1.url)(\"queryParams\", item_r1 == null ? null : item_r1.queryParams)(\"ngStyle\", i0.ɵɵpureFunction1(4, _c0, ctx_r3.fontColor));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r1.label);\n} }\nfunction NgDynamicBreadcrumbComponent_span_1_span_3_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 2);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const item_r1 = i0.ɵɵnextContext().$implicit;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(2, _c0, ctx_r4.lastLinkColor));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r1.label);\n} }\nfunction NgDynamicBreadcrumbComponent_span_1_span_4_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 7);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r5.symbol);\n} }\nconst _c1 = function (a0) { return { \"font-size\": a0 }; };\nfunction NgDynamicBreadcrumbComponent_span_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\")(1, \"li\", 2);\n    i0.ɵɵtemplate(2, NgDynamicBreadcrumbComponent_span_1_a_2_Template, 2, 6, \"a\", 3);\n    i0.ɵɵtemplate(3, NgDynamicBreadcrumbComponent_span_1_span_3_Template, 2, 4, \"span\", 4);\n    i0.ɵɵtemplate(4, NgDynamicBreadcrumbComponent_span_1_span_4_Template, 2, 1, \"span\", 5);\n    i0.ɵɵelementEnd()();\n} if (rf & 2) {\n    const item_r1 = ctx.$implicit;\n    const i_r2 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(4, _c1, ctx_r0.fontSize));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", item_r1 == null ? null : item_r1.url);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !(item_r1 == null ? null : item_r1.url));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.breadcrumb.length !== i_r2 + 1);\n} }\nconst _c2 = function (a0) { return { \"background-color\": a0 }; };\nclass NgDynamicBreadcrumbComponent {\n    constructor(activatedRoute, router, ngDynamicBreadcrumbService) {\n        this.activatedRoute = activatedRoute;\n        this.router = router;\n        this.ngDynamicBreadcrumbService = ngDynamicBreadcrumbService;\n        this.breadcrumb = [];\n        this.bgColor = '#eee';\n        this.fontSize = '18px';\n        this.fontColor = '#0275d8';\n        this.lastLinkColor = '#000';\n        this.symbol = ' / ';\n        this.breadCrumbData();\n    }\n    ngOnInit() {\n        this.ngDynamicBreadcrumbService.breadcrumbLabels.subscribe((labelData) => {\n            for (const label in labelData) {\n                if (labelData.hasOwnProperty(label)) {\n                    this.breadcrumb.map((crumb) => {\n                        const labelParams = crumb.label.match(/[^{{]+(?=\\}})/g);\n                        if (labelParams) {\n                            for (const labelParam of labelParams) {\n                                const dynamicData = labelData[label];\n                                if (labelParam === label) {\n                                    crumb.label = crumb.label.replace('{{' + labelParam + '}}', dynamicData);\n                                }\n                            }\n                        }\n                    });\n                }\n            }\n        });\n        this.ngDynamicBreadcrumbService.newBreadcrumb.subscribe((breadcrumb) => {\n            if (breadcrumb.length > 0) {\n                this.updateData(this.activatedRoute, breadcrumb);\n            }\n        });\n    }\n    breadCrumbData() {\n        this.router.events\n            .pipe(filter(event => event instanceof NavigationEnd))\n            .pipe(map(() => this.activatedRoute))\n            .pipe(map((route) => {\n            while (route.firstChild) {\n                route = route.firstChild;\n            }\n            return route;\n        }))\n            .pipe(filter(route => route.outlet === PRIMARY_OUTLET))\n            .subscribe(route => {\n            this.params = route.snapshot.params;\n            this.updateData(route, null);\n        });\n    }\n    updateData(route, newBreadcrumb) {\n        if (route.snapshot.data.breadcrumb || newBreadcrumb) {\n            const data = route.snapshot.data.breadcrumb ? route.snapshot.data.breadcrumb : newBreadcrumb;\n            const breadcrumb = (JSON.parse(JSON.stringify(data)));\n            breadcrumb.map((crumb) => {\n                const urlChunks = crumb.url.split('/');\n                for (const chunk of urlChunks) {\n                    if (chunk.includes(':')) {\n                        const paramID = chunk.replace(':', '');\n                        // const routerParamID = route.snapshot.params[paramID];\n                        const routerParamID = this.params[paramID];\n                        crumb.url = crumb.url.replace(`:${paramID}`, routerParamID);\n                    }\n                }\n                const labelParams = crumb.label.match(/[^{{]+(?=\\}})/g);\n                if (labelParams) {\n                    for (const labelParam of labelParams) {\n                        // const routerParamID = route.snapshot.params[labelParam.trim()];\n                        const routerParamID = this.params[labelParam.trim()];\n                        if (routerParamID) {\n                            crumb.label = crumb.label.replace('{{' + labelParam + '}}', routerParamID);\n                        }\n                        else {\n                            // crumb.label = crumb.label.replace('{{' + labelParam + '}}', '');\n                        }\n                    }\n                }\n            });\n            this.breadcrumb = breadcrumb;\n        }\n        else {\n            this.breadcrumb = [];\n        }\n    }\n}\nNgDynamicBreadcrumbComponent.ɵfac = function NgDynamicBreadcrumbComponent_Factory(t) { return new (t || NgDynamicBreadcrumbComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(NgDynamicBreadcrumbService)); };\nNgDynamicBreadcrumbComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: NgDynamicBreadcrumbComponent, selectors: [[\"app-ng-dynamic-breadcrumb\"]], inputs: { bgColor: \"bgColor\", fontSize: \"fontSize\", fontColor: \"fontColor\", lastLinkColor: \"lastLinkColor\", symbol: \"symbol\" }, decls: 2, vars: 4, consts: [[1, \"custom-bread-crumb\", 3, \"ngStyle\"], [4, \"ngFor\", \"ngForOf\"], [3, \"ngStyle\"], [3, \"routerLink\", \"queryParams\", \"ngStyle\", 4, \"ngIf\"], [3, \"ngStyle\", 4, \"ngIf\"], [\"class\", \"line\", 4, \"ngIf\"], [3, \"routerLink\", \"queryParams\", \"ngStyle\"], [1, \"line\"]], template: function NgDynamicBreadcrumbComponent_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ul\", 0);\n        i0.ɵɵtemplate(1, NgDynamicBreadcrumbComponent_span_1_Template, 5, 6, \"span\", 1);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(2, _c2, ctx.bgColor));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.breadcrumb);\n    } }, dependencies: [i1.RouterLinkWithHref, i3.NgForOf, i3.NgIf, i3.NgStyle], styles: [\".custom-bread-crumb[_ngcontent-%COMP%]{padding:10px 16px;list-style:none}.custom-bread-crumb[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]{display:inline}.custom-bread-crumb[_ngcontent-%COMP%]   .line[_ngcontent-%COMP%]{padding-right:3px}.custom-bread-crumb[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{text-decoration:none}.custom-bread-crumb[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:hover{color:#01447e;text-decoration:underline}\"] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgDynamicBreadcrumbComponent, [{\n        type: Component,\n        args: [{ selector: 'app-ng-dynamic-breadcrumb', template: \"<ul class=\\\"custom-bread-crumb\\\" [ngStyle]=\\\"{'background-color': bgColor}\\\">\\n  <span *ngFor=\\\"let item of breadcrumb; let i = index\\\">\\n      <li [ngStyle]=\\\"{'font-size': fontSize}\\\">\\n          <a *ngIf=\\\"item?.url\\\" [routerLink]=\\\"item?.url\\\" [queryParams]=\\\"item?.queryParams\\\" [ngStyle]=\\\"{'color': fontColor}\\\">{{ item.label }}</a>\\n          <span *ngIf=\\\"!item?.url\\\" [ngStyle]=\\\"{'color': lastLinkColor}\\\">{{ item.label }}</span>\\n          <span class=\\\"line\\\" *ngIf=\\\"breadcrumb.length !== i+1\\\">{{symbol}}</span>\\n      </li>\\n  </span>\\n</ul>\\n\", styles: [\".custom-bread-crumb{padding:10px 16px;list-style:none}.custom-bread-crumb li{display:inline}.custom-bread-crumb .line{padding-right:3px}.custom-bread-crumb li a{text-decoration:none}.custom-bread-crumb li a:hover{color:#01447e;text-decoration:underline}\\n\"] }]\n    }], function () { return [{ type: i1.ActivatedRoute }, { type: i1.Router }, { type: NgDynamicBreadcrumbService }]; }, { bgColor: [{\n            type: Input\n        }], fontSize: [{\n            type: Input\n        }], fontColor: [{\n            type: Input\n        }], lastLinkColor: [{\n            type: Input\n        }], symbol: [{\n            type: Input\n        }] }); })();\n\nclass NgDynamicBreadcrumbModule {\n}\nNgDynamicBreadcrumbModule.ɵfac = function NgDynamicBreadcrumbModule_Factory(t) { return new (t || NgDynamicBreadcrumbModule)(); };\nNgDynamicBreadcrumbModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: NgDynamicBreadcrumbModule });\nNgDynamicBreadcrumbModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [RouterModule,\n        CommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgDynamicBreadcrumbModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [NgDynamicBreadcrumbComponent],\n                imports: [\n                    RouterModule,\n                    CommonModule\n                ],\n                exports: [NgDynamicBreadcrumbComponent]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(NgDynamicBreadcrumbModule, { declarations: [NgDynamicBreadcrumbComponent], imports: [RouterModule,\n        CommonModule], exports: [NgDynamicBreadcrumbComponent] }); })();\n\n/*\n * Public API Surface of ng-dynamic-breadcrumb\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgDynamicBreadcrumbComponent, NgDynamicBreadcrumbModule, NgDynamicBreadcrumbService };\n//# sourceMappingURL=ng-dynamic-breadcrumb.mjs.map\n","map":{"version":3,"file":"ng-dynamic-breadcrumb.mjs","sources":["../../../projects/ng-dynamic-breadcrumb/src/lib/ng-dynamic-breadcrumb.service.ts","../../../projects/ng-dynamic-breadcrumb/src/lib/ng-dynamic-breadcrumb.component.html","../../../projects/ng-dynamic-breadcrumb/src/lib/ng-dynamic-breadcrumb.component.ts","../../../projects/ng-dynamic-breadcrumb/src/lib/ng-dynamic-breadcrumb.module.ts","../../../projects/ng-dynamic-breadcrumb/src/projects.ts","../../../projects/ng-dynamic-breadcrumb/src/ng-dynamic-breadcrumb.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { Breadcrumb } from './breadcrumb.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgDynamicBreadcrumbService {\n\n  public breadcrumbLabels: BehaviorSubject<any[]> = new BehaviorSubject<any[]>([]);\n  public newBreadcrumb: BehaviorSubject<Breadcrumb[]> = new BehaviorSubject<Breadcrumb[]>([]);\n\n  constructor() { }\n\n  updateBreadcrumbLabels(labels: any) {\n    this.breadcrumbLabels.next(labels);\n  }\n\n  updateBreadcrumb(newBreadcrumb: Breadcrumb[]) {\n    this.newBreadcrumb.next(newBreadcrumb);\n  }\n\n\n\n}\n","<ul class=\"custom-bread-crumb\" [ngStyle]=\"{'background-color': bgColor}\">\n  <span *ngFor=\"let item of breadcrumb; let i = index\">\n      <li [ngStyle]=\"{'font-size': fontSize}\">\n          <a *ngIf=\"item?.url\" [routerLink]=\"item?.url\" [queryParams]=\"item?.queryParams\" [ngStyle]=\"{'color': fontColor}\">{{ item.label }}</a>\n          <span *ngIf=\"!item?.url\" [ngStyle]=\"{'color': lastLinkColor}\">{{ item.label }}</span>\n          <span class=\"line\" *ngIf=\"breadcrumb.length !== i+1\">{{symbol}}</span>\n      </li>\n  </span>\n</ul>\n","import { Component, OnInit, Input } from '@angular/core';\nimport { ActivatedRoute, Router, NavigationEnd, PRIMARY_OUTLET, RoutesRecognized } from '@angular/router';\nimport { filter, map, mergeMap } from 'rxjs/operators';\nimport { Breadcrumb } from './breadcrumb.model';\nimport { NgDynamicBreadcrumbService } from './ng-dynamic-breadcrumb.service';\n\n@Component({\n  // tslint:disable-next-line: component-selector\n  selector: 'app-ng-dynamic-breadcrumb',\n  templateUrl: './ng-dynamic-breadcrumb.component.html',\n  styleUrls: ['./ng-dynamic-breadcrumb.component.css']\n})\nexport class NgDynamicBreadcrumbComponent implements OnInit {\n\n  breadcrumb: Breadcrumb[] = [];\n  @Input() bgColor = '#eee';\n  @Input() fontSize = '18px';\n  @Input() fontColor = '#0275d8';\n  @Input() lastLinkColor = '#000';\n  @Input() symbol = ' / ';\n  params: { [key: string]: any; };\n\n\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private router: Router,\n    private ngDynamicBreadcrumbService: NgDynamicBreadcrumbService\n  ) {\n    this.breadCrumbData();\n  }\n\n  ngOnInit() {\n    this.ngDynamicBreadcrumbService.breadcrumbLabels.subscribe((labelData) => {\n      for (const label in labelData) {\n        if (labelData.hasOwnProperty(label)) {\n          this.breadcrumb.map((crumb) => {\n            const labelParams = crumb.label.match(/[^{{]+(?=\\}})/g);\n            if (labelParams) {\n              for (const labelParam of labelParams) {\n                const dynamicData = labelData[label];\n                if (labelParam === label) {\n                  crumb.label = crumb.label.replace('{{' + labelParam + '}}', dynamicData);\n                }\n              }\n            }\n          });\n        }\n      }\n    });\n\n    this.ngDynamicBreadcrumbService.newBreadcrumb.subscribe((breadcrumb: Breadcrumb[]) => {\n      if (breadcrumb.length > 0) {\n        this.updateData(this.activatedRoute, breadcrumb);\n      }\n    });\n  }\n  breadCrumbData(): void {\n    this.router.events\n      .pipe(filter(event => event instanceof NavigationEnd))\n      .pipe(map(() => this.activatedRoute))\n      .pipe(map((route) => {\n        while (route.firstChild) { route = route.firstChild; }\n        return route;\n      }))\n      .pipe(filter(route => route.outlet === PRIMARY_OUTLET))\n      .subscribe(route => {\n        this.params = route.snapshot.params;\n        this.updateData(route, null);\n      });\n  }\n\n  private updateData(route, newBreadcrumb): void {\n    if (route.snapshot.data.breadcrumb || newBreadcrumb) {\n      const data = route.snapshot.data.breadcrumb ? route.snapshot.data.breadcrumb : newBreadcrumb;\n      const breadcrumb = (JSON.parse(JSON.stringify(data)));\n      breadcrumb.map((crumb) => {\n\n        const urlChunks = crumb.url.split('/');\n        for (const chunk of urlChunks) {\n          if (chunk.includes(':')) {\n            const paramID = chunk.replace(':', '');\n            // const routerParamID = route.snapshot.params[paramID];\n            const routerParamID = this.params[paramID];\n            crumb.url = crumb.url.replace(`:${paramID}`, routerParamID);\n          }\n        }\n\n        const labelParams = crumb.label.match(/[^{{]+(?=\\}})/g);\n        if (labelParams) {\n          for (const labelParam of labelParams) {\n            // const routerParamID = route.snapshot.params[labelParam.trim()];\n            const routerParamID = this.params[labelParam.trim()];\n            if (routerParamID) {\n              crumb.label = crumb.label.replace('{{' + labelParam + '}}', routerParamID);\n            } else {\n              // crumb.label = crumb.label.replace('{{' + labelParam + '}}', '');\n            }\n          }\n        }\n\n      });\n      this.breadcrumb = breadcrumb;\n    } else {\n      this.breadcrumb = [];\n    }\n  }\n}\n\n","import { NgModule } from '@angular/core';\nimport { NgDynamicBreadcrumbComponent } from './ng-dynamic-breadcrumb.component';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  declarations: [NgDynamicBreadcrumbComponent],\n  imports: [\n    RouterModule,\n    CommonModule\n  ],\n  exports: [NgDynamicBreadcrumbComponent]\n})\nexport class NgDynamicBreadcrumbModule { }\n","/*\n * Public API Surface of ng-dynamic-breadcrumb\n */\n\nexport * from './lib/ng-dynamic-breadcrumb.service';\nexport * from './lib/ng-dynamic-breadcrumb.component';\nexport * from './lib/ng-dynamic-breadcrumb.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './projects';\n"],"names":["i2.NgDynamicBreadcrumbService"],"mappings":"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"}},"fesm2015":{"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, Input, NgModule } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i1 from '@angular/router';\nimport { NavigationEnd, PRIMARY_OUTLET, RouterModule } from '@angular/router';\nimport { filter, map } from 'rxjs/operators';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nclass NgDynamicBreadcrumbService {\n    constructor() {\n        this.breadcrumbLabels = new BehaviorSubject([]);\n        this.newBreadcrumb = new BehaviorSubject([]);\n    }\n    updateBreadcrumbLabels(labels) {\n        this.breadcrumbLabels.next(labels);\n    }\n    updateBreadcrumb(newBreadcrumb) {\n        this.newBreadcrumb.next(newBreadcrumb);\n    }\n}\nNgDynamicBreadcrumbService.ɵfac = function NgDynamicBreadcrumbService_Factory(t) { return new (t || NgDynamicBreadcrumbService)(); };\nNgDynamicBreadcrumbService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: NgDynamicBreadcrumbService, factory: NgDynamicBreadcrumbService.ɵfac, providedIn: 'root' });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgDynamicBreadcrumbService, [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], function () { return []; }, null);\n})();\n\nconst _c0 = function (a0) { return { \"color\": a0 }; };\nfunction NgDynamicBreadcrumbComponent_span_1_a_2_Template(rf, ctx) {\n    if (rf & 1) {\n        i0.ɵɵelementStart(0, \"a\", 6);\n        i0.ɵɵtext(1);\n        i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n        const item_r1 = i0.ɵɵnextContext().$implicit;\n        const ctx_r3 = i0.ɵɵnextContext();\n        i0.ɵɵproperty(\"routerLink\", item_r1 == null ? null : item_r1.url)(\"queryParams\", item_r1 == null ? null : item_r1.queryParams)(\"ngStyle\", i0.ɵɵpureFunction1(4, _c0, ctx_r3.fontColor));\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(item_r1.label);\n    }\n}\nfunction NgDynamicBreadcrumbComponent_span_1_span_3_Template(rf, ctx) {\n    if (rf & 1) {\n        i0.ɵɵelementStart(0, \"span\", 2);\n        i0.ɵɵtext(1);\n        i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n        const item_r1 = i0.ɵɵnextContext().$implicit;\n        const ctx_r4 = i0.ɵɵnextContext();\n        i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(2, _c0, ctx_r4.lastLinkColor));\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(item_r1.label);\n    }\n}\nfunction NgDynamicBreadcrumbComponent_span_1_span_4_Template(rf, ctx) {\n    if (rf & 1) {\n        i0.ɵɵelementStart(0, \"span\", 7);\n        i0.ɵɵtext(1);\n        i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n        const ctx_r5 = i0.ɵɵnextContext(2);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx_r5.symbol);\n    }\n}\nconst _c1 = function (a0) { return { \"font-size\": a0 }; };\nfunction NgDynamicBreadcrumbComponent_span_1_Template(rf, ctx) {\n    if (rf & 1) {\n        i0.ɵɵelementStart(0, \"span\")(1, \"li\", 2);\n        i0.ɵɵtemplate(2, NgDynamicBreadcrumbComponent_span_1_a_2_Template, 2, 6, \"a\", 3);\n        i0.ɵɵtemplate(3, NgDynamicBreadcrumbComponent_span_1_span_3_Template, 2, 4, \"span\", 4);\n        i0.ɵɵtemplate(4, NgDynamicBreadcrumbComponent_span_1_span_4_Template, 2, 1, \"span\", 5);\n        i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n        const item_r1 = ctx.$implicit;\n        const i_r2 = ctx.index;\n        const ctx_r0 = i0.ɵɵnextContext();\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(4, _c1, ctx_r0.fontSize));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", item_r1 == null ? null : item_r1.url);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !(item_r1 == null ? null : item_r1.url));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx_r0.breadcrumb.length !== i_r2 + 1);\n    }\n}\nconst _c2 = function (a0) { return { \"background-color\": a0 }; };\nclass NgDynamicBreadcrumbComponent {\n    constructor(activatedRoute, router, ngDynamicBreadcrumbService) {\n        this.activatedRoute = activatedRoute;\n        this.router = router;\n        this.ngDynamicBreadcrumbService = ngDynamicBreadcrumbService;\n        this.breadcrumb = [];\n        this.bgColor = '#eee';\n        this.fontSize = '18px';\n        this.fontColor = '#0275d8';\n        this.lastLinkColor = '#000';\n        this.symbol = ' / ';\n        this.breadCrumbData();\n    }\n    ngOnInit() {\n        this.ngDynamicBreadcrumbService.breadcrumbLabels.subscribe((labelData) => {\n            for (const label in labelData) {\n                if (labelData.hasOwnProperty(label)) {\n                    this.breadcrumb.map((crumb) => {\n                        const labelParams = crumb.label.match(/[^{{]+(?=\\}})/g);\n                        if (labelParams) {\n                            for (const labelParam of labelParams) {\n                                const dynamicData = labelData[label];\n                                if (labelParam === label) {\n                                    crumb.label = crumb.label.replace('{{' + labelParam + '}}', dynamicData);\n                                }\n                            }\n                        }\n                    });\n                }\n            }\n        });\n        this.ngDynamicBreadcrumbService.newBreadcrumb.subscribe((breadcrumb) => {\n            if (breadcrumb.length > 0) {\n                this.updateData(this.activatedRoute, breadcrumb);\n            }\n        });\n    }\n    breadCrumbData() {\n        this.router.events\n            .pipe(filter(event => event instanceof NavigationEnd))\n            .pipe(map(() => this.activatedRoute))\n            .pipe(map((route) => {\n            while (route.firstChild) {\n                route = route.firstChild;\n            }\n            return route;\n        }))\n            .pipe(filter(route => route.outlet === PRIMARY_OUTLET))\n            .subscribe(route => {\n            this.params = route.snapshot.params;\n            this.updateData(route, null);\n        });\n    }\n    updateData(route, newBreadcrumb) {\n        if (route.snapshot.data.breadcrumb || newBreadcrumb) {\n            const data = route.snapshot.data.breadcrumb ? route.snapshot.data.breadcrumb : newBreadcrumb;\n            const breadcrumb = (JSON.parse(JSON.stringify(data)));\n            breadcrumb.map((crumb) => {\n                const urlChunks = crumb.url.split('/');\n                for (const chunk of urlChunks) {\n                    if (chunk.includes(':')) {\n                        const paramID = chunk.replace(':', '');\n                        // const routerParamID = route.snapshot.params[paramID];\n                        const routerParamID = this.params[paramID];\n                        crumb.url = crumb.url.replace(`:${paramID}`, routerParamID);\n                    }\n                }\n                const labelParams = crumb.label.match(/[^{{]+(?=\\}})/g);\n                if (labelParams) {\n                    for (const labelParam of labelParams) {\n                        // const routerParamID = route.snapshot.params[labelParam.trim()];\n                        const routerParamID = this.params[labelParam.trim()];\n                        if (routerParamID) {\n                            crumb.label = crumb.label.replace('{{' + labelParam + '}}', routerParamID);\n                        }\n                        else {\n                            // crumb.label = crumb.label.replace('{{' + labelParam + '}}', '');\n                        }\n                    }\n                }\n            });\n            this.breadcrumb = breadcrumb;\n        }\n        else {\n            this.breadcrumb = [];\n        }\n    }\n}\nNgDynamicBreadcrumbComponent.ɵfac = function NgDynamicBreadcrumbComponent_Factory(t) { return new (t || NgDynamicBreadcrumbComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(NgDynamicBreadcrumbService)); };\nNgDynamicBreadcrumbComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: NgDynamicBreadcrumbComponent, selectors: [[\"app-ng-dynamic-breadcrumb\"]], inputs: { bgColor: \"bgColor\", fontSize: \"fontSize\", fontColor: \"fontColor\", lastLinkColor: \"lastLinkColor\", symbol: \"symbol\" }, decls: 2, vars: 4, consts: [[1, \"custom-bread-crumb\", 3, \"ngStyle\"], [4, \"ngFor\", \"ngForOf\"], [3, \"ngStyle\"], [3, \"routerLink\", \"queryParams\", \"ngStyle\", 4, \"ngIf\"], [3, \"ngStyle\", 4, \"ngIf\"], [\"class\", \"line\", 4, \"ngIf\"], [3, \"routerLink\", \"queryParams\", \"ngStyle\"], [1, \"line\"]], template: function NgDynamicBreadcrumbComponent_Template(rf, ctx) {\n        if (rf & 1) {\n            i0.ɵɵelementStart(0, \"ul\", 0);\n            i0.ɵɵtemplate(1, NgDynamicBreadcrumbComponent_span_1_Template, 5, 6, \"span\", 1);\n            i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n            i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(2, _c2, ctx.bgColor));\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngForOf\", ctx.breadcrumb);\n        }\n    }, dependencies: [i1.RouterLinkWithHref, i3.NgForOf, i3.NgIf, i3.NgStyle], styles: [\".custom-bread-crumb[_ngcontent-%COMP%]{padding:10px 16px;list-style:none}.custom-bread-crumb[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]{display:inline}.custom-bread-crumb[_ngcontent-%COMP%]   .line[_ngcontent-%COMP%]{padding-right:3px}.custom-bread-crumb[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{text-decoration:none}.custom-bread-crumb[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:hover{color:#01447e;text-decoration:underline}\"] });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgDynamicBreadcrumbComponent, [{\n            type: Component,\n            args: [{ selector: 'app-ng-dynamic-breadcrumb', template: \"<ul class=\\\"custom-bread-crumb\\\" [ngStyle]=\\\"{'background-color': bgColor}\\\">\\n  <span *ngFor=\\\"let item of breadcrumb; let i = index\\\">\\n      <li [ngStyle]=\\\"{'font-size': fontSize}\\\">\\n          <a *ngIf=\\\"item?.url\\\" [routerLink]=\\\"item?.url\\\" [queryParams]=\\\"item?.queryParams\\\" [ngStyle]=\\\"{'color': fontColor}\\\">{{ item.label }}</a>\\n          <span *ngIf=\\\"!item?.url\\\" [ngStyle]=\\\"{'color': lastLinkColor}\\\">{{ item.label }}</span>\\n          <span class=\\\"line\\\" *ngIf=\\\"breadcrumb.length !== i+1\\\">{{symbol}}</span>\\n      </li>\\n  </span>\\n</ul>\\n\", styles: [\".custom-bread-crumb{padding:10px 16px;list-style:none}.custom-bread-crumb li{display:inline}.custom-bread-crumb .line{padding-right:3px}.custom-bread-crumb li a{text-decoration:none}.custom-bread-crumb li a:hover{color:#01447e;text-decoration:underline}\\n\"] }]\n        }], function () { return [{ type: i1.ActivatedRoute }, { type: i1.Router }, { type: NgDynamicBreadcrumbService }]; }, { bgColor: [{\n                type: Input\n            }], fontSize: [{\n                type: Input\n            }], fontColor: [{\n                type: Input\n            }], lastLinkColor: [{\n                type: Input\n            }], symbol: [{\n                type: Input\n            }] });\n})();\n\nclass NgDynamicBreadcrumbModule {\n}\nNgDynamicBreadcrumbModule.ɵfac = function NgDynamicBreadcrumbModule_Factory(t) { return new (t || NgDynamicBreadcrumbModule)(); };\nNgDynamicBreadcrumbModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: NgDynamicBreadcrumbModule });\nNgDynamicBreadcrumbModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [RouterModule,\n        CommonModule] });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgDynamicBreadcrumbModule, [{\n            type: NgModule,\n            args: [{\n                    declarations: [NgDynamicBreadcrumbComponent],\n                    imports: [\n                        RouterModule,\n                        CommonModule\n                    ],\n                    exports: [NgDynamicBreadcrumbComponent]\n                }]\n        }], null, null);\n})();\n(function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(NgDynamicBreadcrumbModule, { declarations: [NgDynamicBreadcrumbComponent], imports: [RouterModule,\n            CommonModule], exports: [NgDynamicBreadcrumbComponent] });\n})();\n\n/*\n * Public API Surface of ng-dynamic-breadcrumb\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgDynamicBreadcrumbComponent, NgDynamicBreadcrumbModule, NgDynamicBreadcrumbService };\n//# sourceMappingURL=ng-dynamic-breadcrumb.mjs.map\n","map":{"version":3,"file":"ng-dynamic-breadcrumb.mjs","sources":["../../../projects/ng-dynamic-breadcrumb/src/lib/ng-dynamic-breadcrumb.service.ts","../../../projects/ng-dynamic-breadcrumb/src/lib/ng-dynamic-breadcrumb.component.html","../../../projects/ng-dynamic-breadcrumb/src/lib/ng-dynamic-breadcrumb.component.ts","../../../projects/ng-dynamic-breadcrumb/src/lib/ng-dynamic-breadcrumb.module.ts","../../../projects/ng-dynamic-breadcrumb/src/projects.ts","../../../projects/ng-dynamic-breadcrumb/src/ng-dynamic-breadcrumb.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { Breadcrumb } from './breadcrumb.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgDynamicBreadcrumbService {\n\n  public breadcrumbLabels: BehaviorSubject<any[]> = new BehaviorSubject<any[]>([]);\n  public newBreadcrumb: BehaviorSubject<Breadcrumb[]> = new BehaviorSubject<Breadcrumb[]>([]);\n\n  constructor() { }\n\n  updateBreadcrumbLabels(labels: any) {\n    this.breadcrumbLabels.next(labels);\n  }\n\n  updateBreadcrumb(newBreadcrumb: Breadcrumb[]) {\n    this.newBreadcrumb.next(newBreadcrumb);\n  }\n\n\n\n}\n","<ul class=\"custom-bread-crumb\" [ngStyle]=\"{'background-color': bgColor}\">\n  <span *ngFor=\"let item of breadcrumb; let i = index\">\n      <li [ngStyle]=\"{'font-size': fontSize}\">\n          <a *ngIf=\"item?.url\" [routerLink]=\"item?.url\" [queryParams]=\"item?.queryParams\" [ngStyle]=\"{'color': fontColor}\">{{ item.label }}</a>\n          <span *ngIf=\"!item?.url\" [ngStyle]=\"{'color': lastLinkColor}\">{{ item.label }}</span>\n          <span class=\"line\" *ngIf=\"breadcrumb.length !== i+1\">{{symbol}}</span>\n      </li>\n  </span>\n</ul>\n","import { Component, OnInit, Input } from '@angular/core';\nimport { ActivatedRoute, Router, NavigationEnd, PRIMARY_OUTLET, RoutesRecognized } from '@angular/router';\nimport { filter, map, mergeMap } from 'rxjs/operators';\nimport { Breadcrumb } from './breadcrumb.model';\nimport { NgDynamicBreadcrumbService } from './ng-dynamic-breadcrumb.service';\n\n@Component({\n  // tslint:disable-next-line: component-selector\n  selector: 'app-ng-dynamic-breadcrumb',\n  templateUrl: './ng-dynamic-breadcrumb.component.html',\n  styleUrls: ['./ng-dynamic-breadcrumb.component.css']\n})\nexport class NgDynamicBreadcrumbComponent implements OnInit {\n\n  breadcrumb: Breadcrumb[] = [];\n  @Input() bgColor = '#eee';\n  @Input() fontSize = '18px';\n  @Input() fontColor = '#0275d8';\n  @Input() lastLinkColor = '#000';\n  @Input() symbol = ' / ';\n  params: { [key: string]: any; };\n\n\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private router: Router,\n    private ngDynamicBreadcrumbService: NgDynamicBreadcrumbService\n  ) {\n    this.breadCrumbData();\n  }\n\n  ngOnInit() {\n    this.ngDynamicBreadcrumbService.breadcrumbLabels.subscribe((labelData) => {\n      for (const label in labelData) {\n        if (labelData.hasOwnProperty(label)) {\n          this.breadcrumb.map((crumb) => {\n            const labelParams = crumb.label.match(/[^{{]+(?=\\}})/g);\n            if (labelParams) {\n              for (const labelParam of labelParams) {\n                const dynamicData = labelData[label];\n                if (labelParam === label) {\n                  crumb.label = crumb.label.replace('{{' + labelParam + '}}', dynamicData);\n                }\n              }\n            }\n          });\n        }\n      }\n    });\n\n    this.ngDynamicBreadcrumbService.newBreadcrumb.subscribe((breadcrumb: Breadcrumb[]) => {\n      if (breadcrumb.length > 0) {\n        this.updateData(this.activatedRoute, breadcrumb);\n      }\n    });\n  }\n  breadCrumbData(): void {\n    this.router.events\n      .pipe(filter(event => event instanceof NavigationEnd))\n      .pipe(map(() => this.activatedRoute))\n      .pipe(map((route) => {\n        while (route.firstChild) { route = route.firstChild; }\n        return route;\n      }))\n      .pipe(filter(route => route.outlet === PRIMARY_OUTLET))\n      .subscribe(route => {\n        this.params = route.snapshot.params;\n        this.updateData(route, null);\n      });\n  }\n\n  private updateData(route, newBreadcrumb): void {\n    if (route.snapshot.data.breadcrumb || newBreadcrumb) {\n      const data = route.snapshot.data.breadcrumb ? route.snapshot.data.breadcrumb : newBreadcrumb;\n      const breadcrumb = (JSON.parse(JSON.stringify(data)));\n      breadcrumb.map((crumb) => {\n\n        const urlChunks = crumb.url.split('/');\n        for (const chunk of urlChunks) {\n          if (chunk.includes(':')) {\n            const paramID = chunk.replace(':', '');\n            // const routerParamID = route.snapshot.params[paramID];\n            const routerParamID = this.params[paramID];\n            crumb.url = crumb.url.replace(`:${paramID}`, routerParamID);\n          }\n        }\n\n        const labelParams = crumb.label.match(/[^{{]+(?=\\}})/g);\n        if (labelParams) {\n          for (const labelParam of labelParams) {\n            // const routerParamID = route.snapshot.params[labelParam.trim()];\n            const routerParamID = this.params[labelParam.trim()];\n            if (routerParamID) {\n              crumb.label = crumb.label.replace('{{' + labelParam + '}}', routerParamID);\n            } else {\n              // crumb.label = crumb.label.replace('{{' + labelParam + '}}', '');\n            }\n          }\n        }\n\n      });\n      this.breadcrumb = breadcrumb;\n    } else {\n      this.breadcrumb = [];\n    }\n  }\n}\n\n","import { NgModule } from '@angular/core';\nimport { NgDynamicBreadcrumbComponent } from './ng-dynamic-breadcrumb.component';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  declarations: [NgDynamicBreadcrumbComponent],\n  imports: [\n    RouterModule,\n    CommonModule\n  ],\n  exports: [NgDynamicBreadcrumbComponent]\n})\nexport class NgDynamicBreadcrumbModule { }\n","/*\n * Public API Surface of ng-dynamic-breadcrumb\n */\n\nexport * from './lib/ng-dynamic-breadcrumb.service';\nexport * from './lib/ng-dynamic-breadcrumb.component';\nexport * from './lib/ng-dynamic-breadcrumb.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './projects';\n"],"names":["i2.NgDynamicBreadcrumbService"],"mappings":"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"}}}